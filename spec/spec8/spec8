#!/bin/bash

# SPEC TYPE=FTR(BUGFIX) VIEW SHOULD NOT BE EXECUTABLE
# The original implementation took a shortcut and used the PATH variable
# and relied on view files having the x permission (`which` command).
# This could lead to a really severe issue..imagine your view filename seems
# to be a command and then does have fatal commands in it but it was meant to
# be displayed but now you unintentionally executed it.

# A new implementation will need to be built using a NS_PATH that treats +x
# files as the runnable commands whereas -x files are all printable views.
#
# for example, the usage might be something like this:
#
# echo echo >>${PWD}/nsscript.1
# echo '$PWD' >>${PWD}/nsview.1
# chmod +x ${PWD}/nsscript.1
# # chmod -x ${PWD}/nsview.1
# NS_PATH="${PWD}"           # preps contained view/exec. files to be accessed
#                            # but still requires import after this statement
# . ns import-script nsscript.1
# . ns import-view nsview.1  # only now is the view accessible to . ns view cmd
# . ns run nsscript.1
# . ns view nsview.1         # prints $PWD

script_path=$(realpath -s "$0")
script_dir="${script_path%/*}"
ns_dir_path=$(realpath "${script_dir}/../../")

PATH="${PATH}:${ns_dir_path}"; \
NS_PATH="${script_dir}"; \
    . ns init

chmod +x "${script_dir}/json"  # this is the test! json should be retrieved
#                              # in a way that does not involve checking for an
#                              # executable file named json
#                              # should not use `which json`

. ns view json > /dev/null 2> /dev/null
ec=$?  # we expect a non-zero status, this should have failed since we never
#      # imported the json view file

if [[ $ec -gt 0 ]]; then
    :
else
    echo "fail => ${script_path}"
    echo "${ec} (exit code) should not be '0'"
fi
