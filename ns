#!/bin/bash

if [[ "$1" == "init" ]]; then
    export NS_SHELL_PID=$$
    mkdir -p /tmp/ns_${NS_SHELL_PID}
    return 0;
fi

if [[ -z "$NS_SHELL_PID" ]]; then
    export NS_SHELL_PID=$$
    mkdir -p /tmp/ns_${NS_SHELL_PID}
fi

export NS_LAST_CMD

# since init is handled above, the possible options are:
#     run
#     export
#     delete
#     import
subcommand="$1"
shift;

# save_subcommand=
if [[ "$subcommand" == "run-piped" || "$subcommand" == "source-piped" ]]; then
    save_subcommand="$subcommand"
    save_argc=$#
    save_args="$@"
elif [[ "$subcommand" == "run" ]]; then
    save_subcommand="$subcommand"
    save_argc=$#
    save_args="$@"
fi

if [[ "view" == "$subcommand" ]]; then
    view_path=$(NS_PATH="$NS_PATH" ns_which -x "$1")
    if [[ ! -f "$view_path" ]]; then
        echo "Error: '${1}' view file either does not exist or is requires removing the execute permission" 1>&2
        return 1
    fi
    view=$(cat "$view_path")
    view_cat="cat << EOF"$'\n'"${view}"$'\n'"EOF"$'\n'
    eval "$view_cat"
    return $?
fi

if [[ "view-piped" == "$subcommand" ]]; then
    view=$(cat)
    view_cat="cat << EOF"$'\n'"${view}"$'\n'"EOF"$'\n'
    eval "$view_cat"
    return $?
fi

if [[ "run" == "$subcommand" || "run-piped" == "$subcommand" || "source-piped" == "$subcommand" ]]; then
    script=$(NS_PATH="$NS_PATH" ns_which +x "$1")
    leading=". ns import "
    import_lines=$(grep "^${leading}" "$script" | sed "s/^${leading}//")
    # echo "test imp lines ${import_lines}<EOL>" >&2
    NS_AUTO_LINES="$import_lines" . ns_auto_export_lines
    # exps=$(grep "$leading" "$script" | head -1)
    # exps="${exps:$leading_len}"
    # exps_arr=($exps)

    NS_LAST_CMD="${script}"

    # . ns export "${exps_arr[@]}"
    if [[ "run-piped" == "$save_subcommand" && $save_argc -eq 1 ]]; then
        "$script" </dev/stdin
        # cat | "$script"
    elif [[ "run-piped" == "$save_subcommand" && $save_argc -gt 1 ]]; then
        pipe_chain=$(NS_PATH="$NS_PATH" ARGS="${save_args}" ns_args_to_pipes)
        pipe_chain="cat|${pipe_chain}"
        eval "$pipe_chain"
        # "$script" </dev/stdin
    elif [[ "source-piped" == "$save_subcommand" && $save_argc -eq 1 ]]; then
        . "$script" < /dev/stdin
    elif [[ "run" == "$save_subcommand" && $save_argc -gt 1 ]]; then
        pipe_chain=$(NS_PATH="$NS_PATH" ARGS="${save_args}" ns_args_to_pipes)
        eval "$pipe_chain"
    else
        "$script"
    fi
    ec=$?

    # . ns delete "${exps_arr[@]}"
    # interesting bug..
    #      the code used to try to run delete on all the imports regardless
    #      of whether it was re-exported back. however it was missing the
    #      filename part (so fails trying to do rm w/out '-r' specified)
    #      and stdout was going to dev/null.
    #      Really, what is intended is to just delete the ones that don't get
    #      re-exported.
    leading=". ns export "
    export_lines=$(grep "^${leading}" "$script" | sed "s/^${leading}//")
    del_lines=$(NS_LHS="$import_lines" NS_RHS="$export_lines" ns_arg_minus)  # (lhs - rhs)
    # delete must happen in reversed line order, otherwise resolving a parameter
    # expression will fail (and instead it tries to delete an empty variable)
    # i.e., should not delete namespace_pattern before myapp_*
    #     # namespace_pattern='myapp_*'
    #     . ns import namespace_pattern
    #     . ns import "${namespace_pattern}"
    del_lines=$(echo "$del_lines" | tac)
    # echo "del_lines=${del_lines}<EOL>">&2
    NS_AUTO_LINES="$del_lines" . ns_auto_delete_lines

    # the script itself already ran an export at the end of the file,
    # now just importing it to make it available to the caller
    NS_AUTO_LINES="$export_lines" . ns_auto_import_lines
    # . ns import "${exps_arr[@]}"

    return $ec
fi

ns_store=/tmp/ns_${NS_SHELL_PID}

saveIFS="$IFS"
IFS=" "$'\n'
while [[ -n "$1" ]]
do
    par="$1"
    # echo "partest: ${par}<END>" >&2
    if [[ "$par" =~ "\$" ]]; then
        par=$(eval "echo \"${par}\"") # dynamic import name,
        #                             # i.e., `. ns import "${bd_ns}"`

        if [[ -z "$par" ]]; then  # get it from storage
            cleaned_par=$(echo "$1" | sed 's/"//g' | sed 's/\$//g' | sed 's/{//g' | sed 's/}//g')
            par="${!cleaned_par}"
        fi
    fi

    ns_name="$par"

    if [[ "delete" == "$subcommand" ]]; then
        if [[ "$ns_name" =~ '*' ]]; then
            NS_PATT="$ns_name" NS_STORE="$ns_store" . ns_delete_pattern
        else
            rm "${ns_store}/${ns_name}" 2>>/dev/null
            export -n "$ns_name"
            unset "$ns_name"
        fi
    elif [[ "export" == "$subcommand" ]]; then
        # val=$(set | grep "${1}=" | head -1 | cut -d '=' -f2)
        # echo "export ${ns_name}" >&2
        if [[ "$ns_name" =~ '*' ]]; then
            # echo "export wildcard ${ns_name}" >&2
            NS_PATT="$ns_name" NS_STORE="$ns_store" . ns_export_pattern
        else
            ns_val="${!ns_name}"
            ns_valenddex=${#ns_val}; ((ns_valenddex--))
            if [[ "${ns_val:$ns_valenddex:1}" == $'\n' ]]; then
                ns_val="${ns_val}{ns_nl}"  # newline gets lost
            fi
            echo "$ns_val" > "${ns_store}/${ns_name}"
        fi
    elif [[ "import" == "$subcommand" ]]; then
        # echo "import ${ns_name}" >&2
        if [[ "$ns_name" =~ '*' ]]; then
            # SAVEGLOBIGNORE="$GLOBIGNORE"
            # GLOBIGNORE="*"
            # set -f  # echo "$-"
            NS_PATT="$ns_name" NS_STORE="$ns_store" . ns_import_pattern
            # set +f
            # GLOBIGNORE="$SAVEGLOBIGNORE"
        else
            ns_val=$(cat "${ns_store}/${ns_name}")
            ns_nldex=${#ns_val}; ((ns_nldex-=7))
            if [[ "${ns_val:$ns_nldex:7}" == "{ns_nl}" ]]; then
                ns_enddex=$ns_nldex; ((ns_enddex--))
                ns_val="${ns_val:0:$ns_enddex}"$'\n'
            fi
            export "${ns_name}=${ns_val}"
            # echo "ns_name=${ns_name}, val=${ns_val}."
        fi
    fi

    shift;

done
IFS="${saveIFS}"
